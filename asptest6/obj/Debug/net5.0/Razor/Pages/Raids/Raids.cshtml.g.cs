#pragma checksum "C:\Users\Labra\source\repos\asptest6\asptest6\Pages\Raids\Raids.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "580721e2c8d0c45f7e245e06f988b356f3e6ac7c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(asptest6.Pages.Raids.Pages_Raids_Raids), @"mvc.1.0.razor-page", @"/Pages/Raids/Raids.cshtml")]
namespace asptest6.Pages.Raids
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Labra\source\repos\asptest6\asptest6\Pages\_ViewImports.cshtml"
using asptest6;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute("RouteTemplate", "/raids/{MembershipType}/{MembershipId}")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"580721e2c8d0c45f7e245e06f988b356f3e6ac7c", @"/Pages/Raids/Raids.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"32c30ccee86fbc3f1dd284aaf8a9b3df551106fd", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Raids_Raids : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<script src=""https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js""></script>
<div id=""app"">
    <div class=""container-fluid bg-dark m-0 p-0"">
        <div class=""row m-0 p-0"">
            <div class=""col-lg-2 bg-success m-0 p-0"">
                <div class=""row bg-danger m-0 p-0"">
                    Last Wish
                </div>
                <div class=""row bg-danger m-0 p-0"">
                    Last Wish
                </div>
                <div class=""row bg-danger m-0 p-0"">
                    Last Wish
                </div>
                <div class=""row bg-danger m-0 p-0"">
                    Last Wish
                </div>
                <div class=""row bg-danger m-0 p-0"">
                    Last Wish
                </div>
                <div class=""row bg-danger m-0 p-0"">
                    Last Wish
                </div>
                <div class=""row bg-danger m-0 p-0"">
                    Last Wish
                </div>
                <div class=""row bg-da");
            WriteLiteral(@"nger m-0 p-0"">
                    Last Wish
                </div>
                <div class=""row bg-danger m-0 p-0"">
                    Last Wish
                </div>
            </div>
            <div class=""col-lg-10 bg-info row m-0 p-0"">
                <div class=""col-lg-12 bg-warning row m-0 p-0"">
                    Labradorite 0 / 0
                </div>
                <div class=""col-lg-6 bg-success row m-0 p-0 align-items-lg-start"">
                    <div class=""col-lg-12 row m-0 p-0 text-center"">
                        <p class=""col-lg-2"">Three-mans</p>
                        <div class=""col-lg-10 row m-0 p-0"">
                            <p class=""col-lg-3 m-0 p-0 bg-dark"">Kills</p>
                            <p class=""col-lg-3 m-0 p-0 bg-primary"">Deaths</p>
                            <p class=""col-lg-3 m-0 p-0 bg-dark"">Fresh</p>
                            <p class=""col-lg-3 m-0 p-0 bg-light"">Flawless</p>
                        </div>
                        <di");
            WriteLiteral(@"v class=""col-lg-10 row p-0 offset-md-2 bg-warning"">
                            <p class=""col-lg-3 m-0 p-0 bg-dark"">4647</p>
                            <p class=""col-lg-3 m-0 p-0 bg-primary"">536</p>
                            <p class=""col-lg-3 m-0 p-0 bg-dark"">True</p>
                            <p class=""col-lg-3 m-0 p-0 bg-light"">False</p>
                        </div>
                    </div>
                    <div class=""col-lg-12 row m-0 p-0 text-center"">
                        <p class=""col-lg-2"">Two-mans</p>
                        <div class=""col-lg-10 row m-0 p-0"">
                            <p class=""col-lg-3 m-0 p-0 bg-dark"">Kills</p>
                            <p class=""col-lg-3 m-0 p-0 bg-primary"">Deaths</p>
                            <p class=""col-lg-3 m-0 p-0 bg-dark"">Fresh</p>
                            <p class=""col-lg-3 m-0 p-0 bg-light"">Flawless</p>
                        </div>
                        <div class=""col-lg-10 row p-0 offset-md-2 bg-warning"">
   ");
            WriteLiteral(@"                         <p class=""col-lg-3 m-0 p-0 bg-dark"">4647</p>
                            <p class=""col-lg-3 m-0 p-0 bg-primary"">536</p>
                            <p class=""col-lg-3 m-0 p-0 bg-dark"">True</p>
                            <p class=""col-lg-3 m-0 p-0 bg-light"">False</p>
                        </div>
                    </div>
                    <div class=""col-lg-12 row m-0 p-0 text-center"">
                        <p class=""col-lg-2"">Solos</p>
                        <div class=""col-lg-10 row m-0 p-0"">
                            <p class=""col-lg-3 m-0 p-0 bg-dark"">Kills</p>
                            <p class=""col-lg-3 m-0 p-0 bg-primary"">Deaths</p>
                            <p class=""col-lg-3 m-0 p-0 bg-dark"">Fresh</p>
                            <p class=""col-lg-3 m-0 p-0 bg-light"">Flawless</p>
                        </div>
                        <div class=""col-lg-10 row p-0 offset-md-2 bg-warning"">
                            <p class=""col-lg-3 m-0 p-0 bg-dark");
            WriteLiteral(@""">4647</p>
                            <p class=""col-lg-3 m-0 p-0 bg-primary"">536</p>
                            <p class=""col-lg-3 m-0 p-0 bg-dark"">True</p>
                            <p class=""col-lg-3 m-0 p-0 bg-light"">False</p>
                        </div>
                    </div>
                </div>
                <div class=""col-lg-6 bg-secondary row m-0 p-0 text-center align-items-start"">
                    <div class=""col-lg-4 m-0 p-0"">
                        Last wish 46:30
                    </div>
                    <div class=""col-lg-8 row bg-danger m-0 p-0"">
                        <p class=""col-lg-3"">Kills</p>
                        <p class=""col-lg-3"">Deaths</p>
                        <p class=""col-lg-3"">Assists</p>
                        <p class=""col-lg-3"">Completed</p>
                    </div>
                    <div class=""col-lg-12 row m-0 p-0"">
                        <img class=""col-lg-1"" src=""/img/Hunter.svg"" alt=""Alternate Text"" />
               ");
            WriteLiteral(@"         <a class=""col-lg-3"" href=""/"">Labradorite</a>
                        <div class=""col-lg-8 row bg-success m-0 p-0"">
                            <p class=""col-lg-3"">2042</p>
                            <p class=""col-lg-3"">535</p>
                            <p class=""col-lg-3"">0</p>
                            <p class=""col-lg-3"">True</p>
                        </div>
                    </div>
                    <div class=""col-lg-12 row m-0 p-0"">
                        <img class=""col-lg-1"" src=""/img/Hunter.svg"" alt=""Alternate Text"" />
                        <a class=""col-lg-3"" href=""/"">Labradorite</a>
                        <div class=""col-lg-8 row bg-success m-0 p-0"">
                            <p class=""col-lg-3"">2042</p>
                            <p class=""col-lg-3"">535</p>
                            <p class=""col-lg-3"">0</p>
                            <p class=""col-lg-3"">True</p>
                        </div>
                    </div>
                </div>
       ");
            WriteLiteral(@"     </div>
        </div>
    </div>
    <div class=""container-fluid"">
        <div class=""row"">
            <div class=""col-lg-2"" v-if=""done"">
                <div class=""col-lg-12 row"" v-for=""raid in raids[activeProfile]"" v-on:click=""activeRaid = raid; activePgcr = null"">
                    <h5 class=""col-lg-8"">{{ raid.raid.displayName }}</h5>
                    <img v-bind:src=""raid.raid.img"" alt=""Alternate Text"" class=""col-lg-4"" />
                </div>
            </div>
            <div class=""col-lg-10 row"">
                <div class=""col-lg-12"" v-for=""profile in profiles.profiles"" v-on:click=""activeProfile=profile.membershipId"" style=""height: 100px"">
                    {{ profile.username }}
                    {{ completedActivtyPages }} / {{ getActivityPagesResults.count }}
                </div>
                <div class=""col-lg-6"" v-if=""activeRaid != null"">
                    <div class=""row"">
                        <h1 class=""col-lg-8"">{{ activeRaid.raid.displayName }}<");
            WriteLiteral(@"/h1>
                        <img class=""col-lg-4"" v-bind:src=""activeRaid.raid.img"" />
                    </div>
                    <div class=""row"">
                        <h4 class=""col-lg-2"">Three mans</h4>
                        <div class=""col-lg-10 row"">
                            <h5 class=""col-lg-3"">Kills</h5>
                            <h5 class=""col-lg-3"">Deaths</h5>
                            <h5 class=""col-lg-3"">Flawless</h5>
                            <h5 class=""col-lg-3"">Fresh</h5>
                            <template v-for=""completion in activeRaid.completions"" v-if=""completion.playerCount == 3"">
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"">{{ completion.kills }}</h5>
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"">{{ completion.deaths }}</h5>
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"" v-if=""completion.flawless == ");
            WriteLiteral(@"1"">True</h5>
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"" v-if=""completion.flawless == 0"">False</h5>
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"" v-if=""completion.startingPhaseIndex == 0"">True</h5>
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"" v-if=""completion.startingPhaseIndex != 0"">False</h5>
                            </template>
                        </div>
                    </div>
                    <div class=""row"">
                        <h4 class=""col-lg-2"">Two mans</h4>
                        <div class=""col-lg-10 row"">
                            <h5 class=""col-lg-3"">Kills</h5>
                            <h5 class=""col-lg-3"">Deaths</h5>
                            <h5 class=""col-lg-3"">Flawless</h5>
                            <h5 class=""col-lg-3"">Fresh</h5>
                            <template v-for=""completion in ac");
            WriteLiteral(@"tiveRaid.completions"" v-if=""completion.playerCount == 2"">
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"">{{ completion.kills }}</h5>
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"">{{ completion.deaths }}</h5>
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"" v-if=""completion.flawless == 1"">True</h5>
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"" v-if=""completion.flawless == 0"">False</h5>
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"" v-if=""completion.startingPhaseIndex == 0"">True</h5>
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"" v-if=""completion.startingPhaseIndex != 0"">False</h5>
                            </template>
                        </div>
                    </div>
                 ");
            WriteLiteral(@"   <div class=""row"">
                        <h4 class=""col-lg-2"">Solos</h4>
                        <div class=""col-lg-10 row"">
                            <h5 class=""col-lg-3"">Kills</h5>
                            <h5 class=""col-lg-3"">Deaths</h5>
                            <h5 class=""col-lg-3"">Flawless</h5>
                            <h5 class=""col-lg-3"">Fresh</h5>
                            <template v-for=""completion in activeRaid.completions"" v-if=""completion.playerCount == 1"">
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"">{{ completion.kills }}</h5>
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"">{{ completion.deaths }}</h5>
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"" v-if=""completion.flawless == 1"">True</h5>
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"" v-if=""completion.flawless ");
            WriteLiteral(@"== 0"">False</h5>
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"" v-if=""completion.startingPhaseIndex == 0"">True</h5>
                                <h5 class=""col-lg-3"" v-on:click=""SetActivePgcr(completion.pgcrId)"" v-if=""completion.startingPhaseIndex != 0"">False</h5>
                            </template>
                        </div>
                    </div>
                </div>
                <div class=""col-lg-6 row"" v-if=""activePgcr != null"">
                    <div class=""col-lg-6"" style=""height: 100px""></div>
                    <div class=""col-lg-6 row"" style=""height: 100px"">
                        <h5 class=""col-lg-3"">Kills</h5>
                        <h5 class=""col-lg-3"">Deaths</h5>
                        <h5 class=""col-lg-3"">Assists</h5>
                        <h5 class=""col-lg-3"">Completed</h5>
                    </div>
                    <div class=""col-lg-12 row"" v-for=""entry in activePgcr.response.entries"" style=""he");
            WriteLiteral(@"ight: 100px;"">
                        <img class=""col-lg-2"" v-bind:src=""'/img/' + entry.player.characterClass +  '.svg'"" />
                        <a class=""col-lg-4"" v-bind:href=""'/raids/' + entry.player.destinyUserInfo.membershipType + '/' + entry.player.destinyUserInfo.membershipId"">{{ entry.player.destinyUserInfo.displayName }}</a>
");
            WriteLiteral(@"                        <div class=""col-lg-6 row"">
                            <h5 class=""col-lg-3"">{{ entry.values.kills.basic.displayValue }}</h5>
                            <h5 class=""col-lg-3"">{{ entry.values.deaths.basic.displayValue }}</h5>
                            <h5 class=""col-lg-3"">{{ entry.values.assists.basic.displayValue }}</h5>
                            <h5 class=""col-lg-3"">{{ entry.values.completed.basic.displayValue }}</h5>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    var app = new Vue({
        el: '#app',
        mounted() {
            fetch('");
#nullable restore
#line 220 "C:\Users\Labra\source\repos\asptest6\asptest6\Pages\Raids\Raids.cshtml"
              Write(Url.RouteUrl("ProfileController"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"/GetProfileAndUpdateCharacters', {
                method: ""POST"",
                body: JSON.stringify({
                    membershipType: this.membershipType,
                    membershipId: this.membershipId
                }),
                headers: {
                    'Content-Type': 'application/json',
                    Accept: 'application/json',
                }
            })
                .then(response => response.json())
                .then((data) => {
                    this.profiles = data;
                    this.done = true;
                    this.FetchRaids();


                     fetch('");
#nullable restore
#line 238 "C:\Users\Labra\source\repos\asptest6\asptest6\Pages\Raids\Raids.cshtml"
                       Write(Url.RouteUrl("ProfileController"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"/CharacterPages', {
                        method: ""POST"",
                        body: JSON.stringify(
                            this.profiles.profiles
                        ),
                         headers: {
                             'Content-Type': 'application/json',
                             Accept: 'application/json',
                        }
                     })
                        .then(response => response.json())
                        .then((data2) => {
                            this.getActivityPagesResults = data2;
                            console.log(data2);
                            this.InitRequestPCGRsForCharacters();

                            this.activeProfile = 0;
                        });
                });

        },
        data: {
            profiles: null,
            getActivityPagesResults: {
                characters: [],
                count: 0,
                pages: 0
            },
            raids: {},
    ");
            WriteLiteral("        activeProfile: null,\r\n            membershipId: \'");
#nullable restore
#line 268 "C:\Users\Labra\source\repos\asptest6\asptest6\Pages\Raids\Raids.cshtml"
                      Write(Model.MembershipId);

#line default
#line hidden
#nullable disable
            WriteLiteral("\',\r\n            membershipType: \'");
#nullable restore
#line 269 "C:\Users\Labra\source\repos\asptest6\asptest6\Pages\Raids\Raids.cshtml"
                        Write(Model.MembershipType);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
            done: false,
            completedActivtyPages: 0,
            activeRaid: null,
            activePgcr: null
        },
        methods: {
            InitRequestPCGRsForCharacters() {
                let self = this;
                this.getActivityPagesResults.characters.forEach((character) => {
                    let amountOfPages = character.pages;
                    for (var i = 0; i < amountOfPages; i++) {
                        self.RequestPCGRsForCharacters(character);
                        character.pages--;
                    }
                });
            },
            RequestPCGRsForCharacters(character) {
                fetch('");
#nullable restore
#line 287 "C:\Users\Labra\source\repos\asptest6\asptest6\Pages\Raids\Raids.cshtml"
                  Write(Url.RouteUrl("ProfileController"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"/PcgrsPage', {
                    method: ""POST"",
                    body: JSON.stringify(character),
                    headers: {
                        'Content-Type': 'application/json',
                        Accept: 'application/json',
                    }
                })
                .then(response => response.json())
                .then((data) => {
                    console.log(data);
                    this.completedActivtyPages += data.count;
                    if (this.completedActivtyPages == this.getActivityPagesResults.count) {
                        this.FetchRaids();
                    }
                });
            },
            FetchRaids() {
                let self = this;
                this.profiles.profiles.forEach((profile) => {
                    fetch('");
#nullable restore
#line 307 "C:\Users\Labra\source\repos\asptest6\asptest6\Pages\Raids\Raids.cshtml"
                      Write(Url.RouteUrl("ProfileController"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"/ProfileRaids', {
                        method: ""POST"",
                        body: JSON.stringify(profile),
                        headers: {
                            'Content-Type': 'application/json',
                            Accept: 'application/json',
                        }
                    })
                    .then(response => response.json())
                    .then((data) => {
                        self.raids[data.profile.membershipId] = data.raidCompletions;
                    });
                });
            },
            SetActivePgcr(id) {
                console.log(id);
                fetch('");
#nullable restore
#line 323 "C:\Users\Labra\source\repos\asptest6\asptest6\Pages\Raids\Raids.cshtml"
                  Write(Url.RouteUrl("ProfileController"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"/GetPgcr?id=' +  id, {
                        method: ""POST"",
                        headers: {
                            'Content-Type': 'application/json',
                            Accept: 'application/json',
                        }
                    })
                    .then(response => response.json())
                    .then((data) => {
                        this.activePgcr = data;
                    });
            }
        }
    });
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<asptest6.Pages.Forms.RaidsModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<asptest6.Pages.Forms.RaidsModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<asptest6.Pages.Forms.RaidsModel>)PageContext?.ViewData;
        public asptest6.Pages.Forms.RaidsModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
